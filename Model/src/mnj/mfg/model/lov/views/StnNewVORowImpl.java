package mnj.mfg.model.lov.views;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 27 16:13:16 BDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class StnNewVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Stn {
            public Object get(StnNewVORowImpl obj) {
                return obj.getStn();
            }

            public void put(StnNewVORowImpl obj, Object value) {
                obj.setStn((String)value);
            }
        }
        ,
        StnQty {
            public Object get(StnNewVORowImpl obj) {
                return obj.getStnQty();
            }

            public void put(StnNewVORowImpl obj, Object value) {
                obj.setStnQty((Number)value);
            }
        }
        ,
        Wash {
            public Object get(StnNewVORowImpl obj) {
                return obj.getWash();
            }

            public void put(StnNewVORowImpl obj, Object value) {
                obj.setWash((String)value);
            }
        }
        ,
        Color {
            public Object get(StnNewVORowImpl obj) {
                return obj.getColor();
            }

            public void put(StnNewVORowImpl obj, Object value) {
                obj.setColor((String)value);
            }
        }
        ,
        FabricType {
            public Object get(StnNewVORowImpl obj) {
                return obj.getFabricType();
            }

            public void put(StnNewVORowImpl obj, Object value) {
                obj.setFabricType((String)value);
            }
        }
        ,
        Quantity {
            public Object get(StnNewVORowImpl obj) {
                return obj.getQuantity();
            }

            public void put(StnNewVORowImpl obj, Object value) {
                obj.setQuantity((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(StnNewVORowImpl object);

        public abstract void put(StnNewVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int STN = AttributesEnum.Stn.index();
    public static final int STNQTY = AttributesEnum.StnQty.index();
    public static final int WASH = AttributesEnum.Wash.index();
    public static final int COLOR = AttributesEnum.Color.index();
    public static final int FABRICTYPE = AttributesEnum.FabricType.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();

    /**
     * This is the default constructor (do not remove).
     */
    public StnNewVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Stn.
     * @return the Stn
     */
    public String getStn() {
        return (String) getAttributeInternal(STN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Stn.
     * @param value value to set the  Stn
     */
    public void setStn(String value) {
        setAttributeInternal(STN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute StnQty.
     * @return the StnQty
     */
    public Number getStnQty() {
        return (Number) getAttributeInternal(STNQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute StnQty.
     * @param value value to set the  StnQty
     */
    public void setStnQty(Number value) {
        setAttributeInternal(STNQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Wash.
     * @return the Wash
     */
    public String getWash() {
        return (String) getAttributeInternal(WASH);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Wash.
     * @param value value to set the  Wash
     */
    public void setWash(String value) {
        setAttributeInternal(WASH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Color.
     * @return the Color
     */
    public String getColor() {
        return (String) getAttributeInternal(COLOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Color.
     * @param value value to set the  Color
     */
    public void setColor(String value) {
        setAttributeInternal(COLOR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FabricType.
     * @return the FabricType
     */
    public String getFabricType() {
        return (String) getAttributeInternal(FABRICTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FabricType.
     * @param value value to set the  FabricType
     */
    public void setFabricType(String value) {
        setAttributeInternal(FABRICTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Quantity.
     * @return the Quantity
     */
    public String getQuantity() {
        return (String) getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Quantity.
     * @param value value to set the  Quantity
     */
    public void setQuantity(String value) {
        setAttributeInternal(QUANTITY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
