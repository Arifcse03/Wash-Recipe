package mnj.mfg.model.lov.views;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 27 13:24:59 BDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OperationsPopUpVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        OperationCode {
            public Object get(OperationsPopUpVORowImpl obj) {
                return obj.getOperationCode();
            }

            public void put(OperationsPopUpVORowImpl obj, Object value) {
                obj.setOperationCode((String)value);
            }
        }
        ,
        MajorOperation {
            public Object get(OperationsPopUpVORowImpl obj) {
                return obj.getMajorOperation();
            }

            public void put(OperationsPopUpVORowImpl obj, Object value) {
                obj.setMajorOperation((String)value);
            }
        }
        ,
        MinorOperation {
            public Object get(OperationsPopUpVORowImpl obj) {
                return obj.getMinorOperation();
            }

            public void put(OperationsPopUpVORowImpl obj, Object value) {
                obj.setMinorOperation((String)value);
            }
        }
        ,
        Sam {
            public Object get(OperationsPopUpVORowImpl obj) {
                return obj.getSam();
            }

            public void put(OperationsPopUpVORowImpl obj, Object value) {
                obj.setSam((String)value);
            }
        }
        ,
        Machinetype {
            public Object get(OperationsPopUpVORowImpl obj) {
                return obj.getMachinetype();
            }

            public void put(OperationsPopUpVORowImpl obj, Object value) {
                obj.setMachinetype((String)value);
            }
        }
        ,
        Deptname {
            public Object get(OperationsPopUpVORowImpl obj) {
                return obj.getDeptname();
            }

            public void put(OperationsPopUpVORowImpl obj, Object value) {
                obj.setDeptname((String)value);
            }
        }
        ,
        Flag {
            public Object get(OperationsPopUpVORowImpl obj) {
                return obj.getFlag();
            }

            public void put(OperationsPopUpVORowImpl obj, Object value) {
                obj.setFlag((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(OperationsPopUpVORowImpl object);

        public abstract void put(OperationsPopUpVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int OPERATIONCODE = AttributesEnum.OperationCode.index();
    public static final int MAJOROPERATION = AttributesEnum.MajorOperation.index();
    public static final int MINOROPERATION = AttributesEnum.MinorOperation.index();
    public static final int SAM = AttributesEnum.Sam.index();
    public static final int MACHINETYPE = AttributesEnum.Machinetype.index();
    public static final int DEPTNAME = AttributesEnum.Deptname.index();
    public static final int FLAG = AttributesEnum.Flag.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OperationsPopUpVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute OperationCode.
     * @return the OperationCode
     */
    public String getOperationCode() {
        return (String) getAttributeInternal(OPERATIONCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OperationCode.
     * @param value value to set the  OperationCode
     */
    public void setOperationCode(String value) {
        setAttributeInternal(OPERATIONCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MajorOperation.
     * @return the MajorOperation
     */
    public String getMajorOperation() {
        return (String) getAttributeInternal(MAJOROPERATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MajorOperation.
     * @param value value to set the  MajorOperation
     */
    public void setMajorOperation(String value) {
        setAttributeInternal(MAJOROPERATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MinorOperation.
     * @return the MinorOperation
     */
    public String getMinorOperation() {
        return (String) getAttributeInternal(MINOROPERATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MinorOperation.
     * @param value value to set the  MinorOperation
     */
    public void setMinorOperation(String value) {
        setAttributeInternal(MINOROPERATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Sam.
     * @return the Sam
     */
    public String getSam() {
        return (String) getAttributeInternal(SAM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Sam.
     * @param value value to set the  Sam
     */
    public void setSam(String value) {
        setAttributeInternal(SAM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Machinetype.
     * @return the Machinetype
     */
    public String getMachinetype() {
        return (String) getAttributeInternal(MACHINETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Machinetype.
     * @param value value to set the  Machinetype
     */
    public void setMachinetype(String value) {
        setAttributeInternal(MACHINETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Deptname.
     * @return the Deptname
     */
    public String getDeptname() {
        return (String) getAttributeInternal(DEPTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Deptname.
     * @param value value to set the  Deptname
     */
    public void setDeptname(String value) {
        setAttributeInternal(DEPTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Flag.
     * @return the Flag
     */
    public String getFlag() {
        return (String) getAttributeInternal(FLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Flag.
     * @param value value to set the  Flag
     */
    public void setFlag(String value) {
        setAttributeInternal(FLAG, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
