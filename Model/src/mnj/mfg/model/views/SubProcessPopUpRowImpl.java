package mnj.mfg.model.views;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 07 14:23:53 BDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SubProcessPopUpRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        MajorOperations {
            public Object get(SubProcessPopUpRowImpl obj) {
                return obj.getMajorOperations();
            }

            public void put(SubProcessPopUpRowImpl obj, Object value) {
                obj.setMajorOperations((String)value);
            }
        }
        ,
        MinorOperation {
            public Object get(SubProcessPopUpRowImpl obj) {
                return obj.getMinorOperation();
            }

            public void put(SubProcessPopUpRowImpl obj, Object value) {
                obj.setMinorOperation((String)value);
            }
        }
        ,
        SubProcess {
            public Object get(SubProcessPopUpRowImpl obj) {
                return obj.getSubProcess();
            }

            public void put(SubProcessPopUpRowImpl obj, Object value) {
                obj.setSubProcess((String)value);
            }
        }
        ,
        Selection {
            public Object get(SubProcessPopUpRowImpl obj) {
                return obj.getSelection();
            }

            public void put(SubProcessPopUpRowImpl obj, Object value) {
                obj.setSelection((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SubProcessPopUpRowImpl object);

        public abstract void put(SubProcessPopUpRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int MAJOROPERATIONS = AttributesEnum.MajorOperations.index();
    public static final int MINOROPERATION = AttributesEnum.MinorOperation.index();
    public static final int SUBPROCESS = AttributesEnum.SubProcess.index();
    public static final int SELECTION = AttributesEnum.Selection.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SubProcessPopUpRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute MajorOperations.
     * @return the MajorOperations
     */
    public String getMajorOperations() {
        return (String) getAttributeInternal(MAJOROPERATIONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MajorOperations.
     * @param value value to set the  MajorOperations
     */
    public void setMajorOperations(String value) {
        setAttributeInternal(MAJOROPERATIONS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MinorOperation.
     * @return the MinorOperation
     */
    public String getMinorOperation() {
        return (String) getAttributeInternal(MINOROPERATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MinorOperation.
     * @param value value to set the  MinorOperation
     */
    public void setMinorOperation(String value) {
        setAttributeInternal(MINOROPERATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SubProcess.
     * @return the SubProcess
     */
    public String getSubProcess() {
        return (String) getAttributeInternal(SUBPROCESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SubProcess.
     * @param value value to set the  SubProcess
     */
    public void setSubProcess(String value) {
        setAttributeInternal(SUBPROCESS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Selection.
     * @return the Selection
     */
    public String getSelection() {
        return (String) getAttributeInternal(SELECTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Selection.
     * @param value value to set the  Selection
     */
    public void setSelection(String value) {
        setAttributeInternal(SELECTION, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
